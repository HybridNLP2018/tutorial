from keras.models import Sequential, Model
from keras.layers import Embedding, Conv1D, MaxPooling1D, Reshape, Flatten, Dense,InputLayer, Conv2D, BatchNormalization, MaxPooling2D, Concatenate

def generateTextualModel(num_class,len_word_index):
      model = Sequential()
      model.add(Embedding(len_word_index+1, 300, embeddings_initializer="uniform", input_length=1000, trainable=True))
      model.add(Conv1D(512, 5, activation="relu"))
      model.add(MaxPooling1D(5))
      model.add(Conv1D(512, 5, activation="relu"))
      model.add(MaxPooling1D(5))
      model.add(Conv1D(512, 5, activation="relu"))
      model.add(MaxPooling1D(35))
      model.add(Reshape((1,1,512)))
      model.add(Flatten())
      model.add(Dense(128, activation='relu'))
      model.add(Dense(num_class, activation='softmax'))
      return model
def generateVisualModel(num_class):
      model = Sequential()
      model.add(InputLayer(input_shape=(224,224,3)))
      model.add(Conv2D(64, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(Conv2D(64, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(MaxPooling2D(2))
      model.add(Conv2D(128, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(Conv2D(128, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(MaxPooling2D(2))
      model.add(Conv2D(256, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(Conv2D(256, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(MaxPooling2D(2))
      model.add(Conv2D(512, (3,3), padding = "same", activation="relu"))
      model.add(BatchNormalization())
      model.add(Conv2D(512, (3,3), padding = "same", activation="relu")) 
      model.add(BatchNormalization())
      model.add(MaxPooling2D((28,28),2))
      model.add(Flatten())
      model.add(Dense(128, activation='relu'))
      model.add(Dense(num_class, activation='softmax'))
      return model
def generateCrossModel(num_class,len_word_index):
      modelCaptions = Sequential()
      modelCaptions.add(Embedding(len_word_index+1, 300, embeddings_initializer="uniform", input_length=1000, trainable=True))      
      modelCaptions.add(Conv1D(512, 5, activation="relu"))
      modelCaptions.add(MaxPooling1D(5))
      modelCaptions.add(Conv1D(512, 5, activation="relu"))
      modelCaptions.add(MaxPooling1D(5))
      modelCaptions.add(Conv1D(512, 5, activation="relu"))
      modelCaptions.add(MaxPooling1D(35))
      modelCaptions.add(Reshape((1,1,512)))
  
      modelImages = Sequential()
      modelImages.add(InputLayer(input_shape=(224,224,3)))
      modelImages.add(Conv2D(64, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(Conv2D(64, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(MaxPooling2D(2))
      modelImages.add(Conv2D(128, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(Conv2D(128, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(MaxPooling2D(2))
      modelImages.add(Conv2D(256, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(Conv2D(256, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(MaxPooling2D(2))
      modelImages.add(Conv2D(512, (3,3), padding = "same", activation="relu"))
      modelImages.add(BatchNormalization())
      modelImages.add(Conv2D(512, (3,3), padding = "same", activation="relu")) 
      modelImages.add(BatchNormalization())
      modelImages.add(MaxPooling2D((28,28),2))                 
  
      mergedOut = Concatenate()([modelCaptions.output,modelImages.output])
      mergedOut = Flatten()(mergedOut)    
      mergedOut = Dense(128, activation='relu')(mergedOut)  
      mergedOut = Dense(2, activation='softmax')(mergedOut)
  
  
      newModel = Model([modelCaptions.input,modelImages.input], mergedOut)
      return newModel
